plugins {
    id 'java-library'
    id 'jacoco'
    id "com.github.ben-manes.versions" version "0.51.0"
    id "org.sonarqube" version "5.1.0.4882"
}

version = '0.0.1'
group = 'org.itsallcode'

repositories {
    mavenCentral()
}

dependencies {
}

java {
    toolchain {
        def javaVersion = project.hasProperty('javaVersion') ? project.getProperty('javaVersion') : 23
        languageVersion = JavaLanguageVersion.of(javaVersion)
    }
}

javadoc {
    enabled = true
    failOnError = true
    excludes = ["org/itsallcode/luava/ffi/**"]
    options.addBooleanOption('html5', true)
    options.addStringOption('Xwerror', '-quiet')
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "itsallcode"
        property "sonar.exclusions", "build/generated/sources/jextract/**"
    }
}

tasks.sonarqube.dependsOn([tasks.jacocoTestReport])

def currentOs = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem
testing {
    suites {
        test {
            useJUnitJupiter(libs.versions.junit.jupiter)
            dependencies {
                implementation libs.hamcrest
                implementation libs.mockito.core
                implementation libs.mockito.junit
            }
            targets {
                all {
                    testTask.configure {
                        systemProperty 'java.util.logging.config.file', 'src/test/resources/logging.properties'
                        //systemProperty 'jextract.trace.downcalls', 'true'
                        jvmArgs '--enable-native-access=ALL-UNNAMED'
                        if(currentOs.isMacOsX()) {
                            environment "DYLD_LIBRARY_PATH", "${project.buildDir}/lua-libs/"
                        }
                        if(currentOs.isLinux()) {
                            environment "LD_LIBRARY_PATH", "${project.buildDir}/lua-libs/"
                        }
                    }
                }
            }
        }
    }
}

task downloadJextract(type: DownloadTask) {
    def getOs = {
        if(currentOs.isMacOsX()) {
            return "macos"
        }
        if(currentOs.isLinux()) {
            return "linux"
        }
        throw new IllegalStateException("Unsupported operating system: ${currentOs}")
    }
    def getArch = {
        def arch = System.getProperty("os.arch")
        switch(arch) {
            case "amd64":
                return "x64"
            case "x86_64":
                return "x64"
            case "aarch64":
                return "aarch64"
            default:
                throw new IllegalStateException("Unsupported architecture: ${arch}")
        }
    }
    sourceUrl = "https://download.java.net/java/early_access/jextract/22/5/openjdk-22-jextract+5-33_${getOs()}-${getArch()}_bin.tar.gz"
    target = file("${project.buildDir}/jextract.tar.gz")
}

task unpackJextract(type: Copy, dependsOn: [tasks.downloadJextract]) {
    from tarTree(resources.gzip(tasks.downloadJextract.outputs.files[0]))
    into file("${project.buildDir}/jextract/")
}

task buildLua(type: Exec) {
    def getMakeGoal = {
        if(currentOs.isLinux()) {
            return "so"
        }
        if(currentOs.isMacOsX()) {
            return "dylib"
        }
        throw new IllegalStateException("Unsupported operating system: ${currentOs}")
    }
    def luaSrc = "${projectDir}/lua/src"
    def installDir = "${project.buildDir}/lua-libs"
    workingDir luaSrc
    commandLine 'make', getMakeGoal()
    inputs.dir(luaSrc)
    outputs.dir(installDir)
    doLast {
        copy {
            from luaSrc
            into installDir
            include "liblua.*"
        }
    }
}

tasks.test.dependsOn(tasks.buildLua)
tasks.build.dependsOn(tasks.buildLua)

task cleanLua(type: Exec) {
    workingDir "${projectDir}/lua/src"
    commandLine 'make', 'clean'
}

clean.dependsOn(tasks.cleanLua)

task generateNativeInterface(type: Exec, dependsOn: [tasks.unpackJextract]) {
    def jextractBinary = "${tasks.unpackJextract.outputs.files[0]}/jextract-22/bin/jextract"
    def includeDir = "${project.rootDir}/lua/src"
    def generatedSrc = "${project.buildDir}/generated/sources/jextract/"
    commandLine jextractBinary,
                '--include-dir', includeDir,
                '--output', generatedSrc,
                '--target-package', 'org.itsallcode.luava.ffi',
                '--library', 'lua',
                '--header-class-name', 'Lua',
                "$includeDir/all_lua.h"
    inputs.dir(includeDir)
    outputs.dir(generatedSrc)
    doLast {

    }
}

compileJava {
    options.compilerArgs += ['--enable-preview', '-Xlint:all,-preview,-restricted', '-Werror']
}

sourceSets {
    main {
        java {
            srcDir(generateNativeInterface)
        }
    }
}
